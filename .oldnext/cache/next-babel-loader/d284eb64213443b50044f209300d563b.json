{"ast":null,"code":"import cheerio from 'cheerio';\nimport { GetChannelJson, GetVideoJson } from \"../connector/vimeo.connector\";\n\nconst _liConverterToJson = body => {\n  const $ = cheerio.load(body);\n  const items = $('li').toArray();\n  const json = [];\n  items.map(async item => {\n    //TODO usar o GetVideo....\n    const videoId = $(item).attr('id').replace(\"clip\", \"\");\n    const videoJson = await GetVideoJson(videoId);\n    console.log(videoJson);\n    json.push({\n      thumbnail: \"\",\n      title: \"\",\n      publishedTimeText: $(item).find('.meta .time').text().trim(),\n      viewCountText: $(item).find(\".meta .plays\").text()\n    });\n    console.log($(item).find(\".vp-preview .vp-preview-cover\").html());\n    console.log('----');\n  });\n  return json;\n}; //list && list.reduce( (acc, item) => {\n//           acc.concat([\n//               {url: item.find('#info')}\n//           ]);\n//        },[]);\n\n\nconst getVideo = gridVideoRenderer => ({\n  \"videoId\": gridVideoRenderer.videoId,\n  \"thumbnail\": gridVideoRenderer.thumbnail.thumbnails,\n  \"title\": gridVideoRenderer.title.simpleText,\n  \"publishedTimeText\": gridVideoRenderer.publishedTimeText.simpleText,\n  \"viewCountText\": gridVideoRenderer.viewCountText.simpleText\n});\n\nconst GetDataChannel = async channel => {\n  const tabs = await GetChannelJson(channel);\n  const $ = cheerio.load(tabs);\n  const ol = $('#clips');\n\n  const json = _liConverterToJson(ol.html()); //li.find('li').map(item => console.log('xx'));\n\n\n  return json;\n};\n\nexport { GetDataChannel, GetVideoJson as GetVideo };","map":{"version":3,"sources":["/home/noct/Trabalho/my-git/reactjs-nodejs-deck/src/services/vimeo/facade/vimeo.facade.ts"],"names":["cheerio","GetChannelJson","GetVideoJson","_liConverterToJson","body","$","load","items","toArray","json","map","item","videoId","attr","replace","videoJson","console","log","push","thumbnail","title","publishedTimeText","find","text","trim","viewCountText","html","getVideo","gridVideoRenderer","thumbnails","simpleText","GetDataChannel","channel","tabs","ol","GetVideo"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAAQC,cAAR,EAAwBC,YAAxB,QAA2C,8BAA3C;;AAEA,MAAMC,kBAAkB,GAAGC,IAAI,IAAI;AAC/B,QAAMC,CAAC,GAAGL,OAAO,CAACM,IAAR,CAAaF,IAAb,CAAV;AACA,QAAMG,KAAK,GAAGF,CAAC,CAAC,IAAD,CAAD,CAAQG,OAAR,EAAd;AACA,QAAMC,IAAI,GAAG,EAAb;AAEAF,EAAAA,KAAK,CAACG,GAAN,CAAU,MAAMC,IAAN,IAAc;AACpB;AACA,UAAMC,OAAO,GAAGP,CAAC,CAACM,IAAD,CAAD,CAAQE,IAAR,CAAa,IAAb,EAAmBC,OAAnB,CAA2B,MAA3B,EAAkC,EAAlC,CAAhB;AACA,UAAMC,SAAS,GAAG,MAAMb,YAAY,CAACU,OAAD,CAApC;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAN,IAAAA,IAAI,CAACS,IAAL,CAAU;AACNC,MAAAA,SAAS,EAAG,EADN;AAENC,MAAAA,KAAK,EAAG,EAFF;AAGNC,MAAAA,iBAAiB,EAAGhB,CAAC,CAACM,IAAD,CAAD,CAAQW,IAAR,CAAa,aAAb,EAA4BC,IAA5B,GAAmCC,IAAnC,EAHd;AAINC,MAAAA,aAAa,EAAGpB,CAAC,CAACM,IAAD,CAAD,CAAQW,IAAR,CAAa,cAAb,EAA6BC,IAA7B;AAJV,KAAV;AAMAP,IAAAA,OAAO,CAACC,GAAR,CAAYZ,CAAC,CAACM,IAAD,CAAD,CAAQW,IAAR,CAAa,+BAAb,EAA8CI,IAA9C,EAAZ;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,GAbD;AAeA,SAAOR,IAAP;AACH,CArBD,C,CAuBI;AACA;AACA;AACA;AACA;;;AAEJ,MAAMkB,QAAQ,GAAGC,iBAAiB,KAAK;AAC7B,aAAYA,iBAAiB,CAAChB,OADD;AAE7B,eAAcgB,iBAAiB,CAACT,SAAlB,CAA4BU,UAFb;AAG7B,WAAUD,iBAAiB,CAACR,KAAlB,CAAwBU,UAHL;AAI7B,uBAAsBF,iBAAiB,CAACP,iBAAlB,CAAoCS,UAJ7B;AAK7B,mBAAkBF,iBAAiB,CAACH,aAAlB,CAAgCK;AALrB,CAAL,CAAlC;;AASA,MAAMC,cAAc,GAAG,MAAMC,OAAN,IAAiB;AACtC,QAAMC,IAAI,GAAG,MAAMhC,cAAc,CAAC+B,OAAD,CAAjC;AACA,QAAM3B,CAAC,GAAGL,OAAO,CAACM,IAAR,CAAa2B,IAAb,CAAV;AACA,QAAMC,EAAE,GAAG7B,CAAC,CAAC,QAAD,CAAZ;;AACA,QAAMI,IAAI,GAAGN,kBAAkB,CAAC+B,EAAE,CAACR,IAAH,EAAD,CAA/B,CAJsC,CAKtC;;;AACA,SAAOjB,IAAP;AACD,CAPD;;AAQA,SAASsB,cAAT,EAAyB7B,YAAY,IAAIiC,QAAzC","sourcesContent":["import cheerio from 'cheerio'\nimport {GetChannelJson, GetVideoJson} from \"../connector/vimeo.connector\";\n\nconst _liConverterToJson = body => { \n    const $ = cheerio.load(body)\n    const items = $('li').toArray();\n    const json = []\n\n    items.map(async item => {\n        //TODO usar o GetVideo....\n        const videoId = $(item).attr('id').replace(\"clip\",\"\");\n        const videoJson = await GetVideoJson(videoId);\n        console.log(videoJson);\n        json.push({\n            thumbnail : \"\" ,\n            title : \"\",\n            publishedTimeText : $(item).find('.meta .time').text().trim(),\n            viewCountText : $(item).find(\".meta .plays\").text()\n        })\n        console.log($(item).find(\".vp-preview .vp-preview-cover\").html());\n        console.log('----')\n    })\n\n    return json;\n};\n\n    //list && list.reduce( (acc, item) => {\n    //           acc.concat([\n    //               {url: item.find('#info')}\n    //           ]);\n    //        },[]);\n\nconst getVideo = gridVideoRenderer => ({\n          \"videoId\" : gridVideoRenderer.videoId,\n          \"thumbnail\" : gridVideoRenderer.thumbnail.thumbnails,\n          \"title\" : gridVideoRenderer.title.simpleText,\n          \"publishedTimeText\" : gridVideoRenderer.publishedTimeText.simpleText,\n          \"viewCountText\" : gridVideoRenderer.viewCountText.simpleText\n      });\n\n\nconst GetDataChannel = async channel => {\n  const tabs = await GetChannelJson(channel);\n  const $ = cheerio.load(tabs)\n  const ol = $('#clips');\n  const json = _liConverterToJson(ol.html());\n  //li.find('li').map(item => console.log('xx'));\n  return json;\n}\nexport { GetDataChannel, GetVideoJson as GetVideo };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar fetch = require(\"node-fetch\");\n\nvar _getChannelJson = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(channel) {\n    var url, response, content, preJson, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = \"https://www.youtube.com/c/\".concat(channel, \"/videos\");\n            _context.prev = 1;\n            _context.next = 4;\n            return fetch(url);\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return response.text();\n\n          case 7:\n            content = _context.sent;\n            preJson = content.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0];\n            json = JSON.parse(preJson);\n            return _context.abrupt(\"return\", json.contents.twoColumnBrowseResultsRenderer.tabs);\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 13]]);\n  }));\n\n  return function _getChannelJson(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar _tabsConvertToGridRenderer = function _tabsConvertToGridRenderer(tabs) {\n  return tabs.filter(function (tab) {\n    return tab.tabRenderer && tab.tabRenderer.content;\n  })[0].tabRenderer.content.sectionListRenderer.contents[0].itemSectionRenderer.contents[0].gridRenderer.items;\n};\n\nvar getVideo = function getVideo(gridVideoRenderer) {\n  return {\n    \"videoId\": gridVideoRenderer.videoId,\n    \"thumbnail\": gridVideoRenderer.thumbnail.thumbnails,\n    \"title\": gridVideoRenderer.title.simpleText,\n    \"publishedTimeText\": gridVideoRenderer.publishedTimeText.simpleText,\n    \"viewCountText\": gridVideoRenderer.viewCountText.simpleText\n  };\n};\n\nvar GetData = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(channel) {\n    var tabs, items;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _getChannelJson(channel);\n\n          case 2:\n            tabs = _context2.sent;\n            console.log(tabs);\n            _context2.next = 6;\n            return _tabsConvertToGridRenderer(tabs);\n\n          case 6:\n            items = _context2.sent;\n            _context2.next = 9;\n            return items.reduce(function (acc, _ref3) {\n              var gridVideoRenderer = _ref3.gridVideoRenderer;\n              return acc.concat([getVideo(gridVideoRenderer)]);\n            }, []);\n\n          case 9:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function GetData(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n_c = GetData;\nexport default GetData;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetData\");","map":{"version":3,"sources":["/home/noct/Trabalho/my-git/reactjs-nodejs-deck/src/service/connector/youtube.ts"],"names":["fetch","require","_getChannelJson","channel","url","response","text","content","preJson","split","json","JSON","parse","contents","twoColumnBrowseResultsRenderer","tabs","console","log","_tabsConvertToGridRenderer","filter","tab","tabRenderer","sectionListRenderer","itemSectionRenderer","gridRenderer","items","getVideo","gridVideoRenderer","videoId","thumbnail","thumbnails","title","simpleText","publishedTimeText","viewCountText","GetData","reduce","acc","concat"],"mappings":";;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AAEA,IAAMC,eAAe;AAAA,sEAAG,iBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,GADiB,uCACkBD,OADlB;AAAA;AAAA;AAAA,mBAGOH,KAAK,CAACI,GAAD,CAHZ;;AAAA;AAGVC,YAAAA,QAHU;AAAA;AAAA,mBAIMA,QAAQ,CAACC,IAAT,EAJN;;AAAA;AAIVC,YAAAA,OAJU;AAKVC,YAAAA,OALU,GAKAD,OAAO,CAACE,KAAR,CAAc,8BAAd,EAA8C,CAA9C,EAAiDA,KAAjD,CAAuD,GAAvD,EAA4D,CAA5D,CALA;AAMVC,YAAAA,IANU,GAMHC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CANG;AAAA,6CAOTE,IAAI,CAACG,QAAL,CAAcC,8BAAd,CAA6CC,IAPpC;;AAAA;AAAA;AAAA;AASpBC,YAAAA,OAAO,CAACC,GAAR;;AAToB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAff,eAAe;AAAA;AAAA;AAAA,GAArB;;AAaA,IAAMgB,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAAH,IAAI;AAAA,SAAIA,IAAI,CAACI,MAAL,CAAY,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,WAAJ,IAAmBD,GAAG,CAACC,WAAJ,CAAgBd,OAAvC;AAAA,GAAf,EAA+D,CAA/D,EAC9Bc,WAD8B,CAE9Bd,OAF8B,CAG9Be,mBAH8B,CAI9BT,QAJ8B,CAIrB,CAJqB,EAK9BU,mBAL8B,CAM9BV,QAN8B,CAMrB,CANqB,EAO9BW,YAP8B,CAQ9BC,KAR0B;AAAA,CAAvC;;AAUA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,iBAAiB;AAAA,SAAK;AAC7B,eAAYA,iBAAiB,CAACC,OADD;AAE7B,iBAAcD,iBAAiB,CAACE,SAAlB,CAA4BC,UAFb;AAG7B,aAAUH,iBAAiB,CAACI,KAAlB,CAAwBC,UAHL;AAI7B,yBAAsBL,iBAAiB,CAACM,iBAAlB,CAAoCD,UAJ7B;AAK7B,qBAAkBL,iBAAiB,CAACO,aAAlB,CAAgCF;AALrB,GAAL;AAAA,CAAlC;;AASA,IAAMG,OAAO;AAAA,uEAAG,kBAAMhC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACKD,eAAe,CAACC,OAAD,CADpB;;AAAA;AACRY,YAAAA,IADQ;AAEdC,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAFc;AAAA,mBAGMG,0BAA0B,CAACH,IAAD,CAHhC;;AAAA;AAGRU,YAAAA,KAHQ;AAAA;AAAA,mBAIDA,KAAK,CAACW,MAAN,CAAc,UAACC,GAAD,SAAgC;AAAA,kBAAxBV,iBAAwB,SAAxBA,iBAAwB;AACvD,qBAAOU,GAAG,CAACC,MAAJ,CAAW,CAACZ,QAAQ,CAACC,iBAAD,CAAT,CAAX,CAAP;AACF,aAFW,EAEV,EAFU,CAJC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPQ,OAAO;AAAA;AAAA;AAAA,GAAb;;KAAMA,O;AAUN,eAAeA,OAAf","sourcesContent":["const fetch = require(\"node-fetch\");\n\nconst _getChannelJson = async channel => {\n const url = `https://www.youtube.com/c/${channel}/videos`\n  try {\n        const response = await fetch(url);\n        const content = await response.text()\n        const preJson = content.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0]\n        const json = JSON.parse(preJson);        \n        return json.contents.twoColumnBrowseResultsRenderer.tabs;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst _tabsConvertToGridRenderer = tabs => tabs.filter(tab => tab.tabRenderer && tab.tabRenderer.content)[0]\n            .tabRenderer\n            .content\n            .sectionListRenderer\n            .contents[0]\n            .itemSectionRenderer\n            .contents[0]\n            .gridRenderer\n            .items;\n\nconst getVideo = gridVideoRenderer => ({\n          \"videoId\" : gridVideoRenderer.videoId,\n          \"thumbnail\" : gridVideoRenderer.thumbnail.thumbnails,\n          \"title\" : gridVideoRenderer.title.simpleText,\n          \"publishedTimeText\" : gridVideoRenderer.publishedTimeText.simpleText,\n          \"viewCountText\" : gridVideoRenderer.viewCountText.simpleText\n      });\n\n\nconst GetData = async channel => {\n  const tabs = await _getChannelJson(channel);\n  console.log(tabs)\n  const items = await _tabsConvertToGridRenderer(tabs);\n  return await items.reduce( (acc, { gridVideoRenderer }) => {\n      return acc.concat([getVideo(gridVideoRenderer)])\n   },[])\n\n}\n\nexport default GetData;\n\n\n"]},"metadata":{},"sourceType":"module"}
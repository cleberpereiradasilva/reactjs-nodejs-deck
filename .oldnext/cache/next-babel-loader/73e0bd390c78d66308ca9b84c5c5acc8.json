{"ast":null,"code":"import { GetChannelText, GetVideoText } from \"../connector/youtube.connector\";\n\nconst _tabsConvertToGridRenderer = tabs => tabs && tabs.filter(tab => tab.tabRenderer && tab.tabRenderer.content)[0].tabRenderer.content.sectionListRenderer.contents[0].itemSectionRenderer.contents[0].gridRenderer.items;\n\nconst GetVideo = async videoId => {\n  const videoText = await GetVideoText(videoId);\n  const preJson = videoText.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0];\n  const json = await JSON.parse(preJson);\n  const gridVideoRenderer = await json.contents.twoColumnWatchNextResults.results.results.contents[0].videoPrimaryInfoRenderer; //console.log(gridVideoRenderer);\n\n  return {\n    \"videoId\": gridVideoRenderer.videoId,\n    \"thumbnail\": gridVideoRenderer.thumbnail.thumbnails,\n    \"title\": gridVideoRenderer.title.simpleText,\n    \"publishedTimeText\": gridVideoRenderer.publishedTimeText.simpleText,\n    \"viewCountText\": gridVideoRenderer.viewCountText.simpleText\n  };\n};\n\nconst GetDataChannel = async channel => {\n  const channelText = await GetChannelText(channel);\n  const preJson = channelText.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0];\n  const json = JSON.parse(preJson);\n  const tabs = json.contents.twoColumnBrowseResultsRenderer.tabs;\n  const items = await _tabsConvertToGridRenderer(tabs);\n  const retorno = Promise.all(items.map(async ({\n    gridVideoRenderer\n  }) => await GetVideo(gridVideoRenderer.videoId))); //  console.log(retorno)\n\n  return retorno;\n};\n\nexport { GetDataChannel, GetVideo };","map":{"version":3,"sources":["/home/noct/Trabalho/my-git/reactjs-nodejs-deck/src/services/youtube/facade/youtube.facade.ts"],"names":["GetChannelText","GetVideoText","_tabsConvertToGridRenderer","tabs","filter","tab","tabRenderer","content","sectionListRenderer","contents","itemSectionRenderer","gridRenderer","items","GetVideo","videoId","videoText","preJson","split","json","JSON","parse","gridVideoRenderer","twoColumnWatchNextResults","results","videoPrimaryInfoRenderer","thumbnail","thumbnails","title","simpleText","publishedTimeText","viewCountText","GetDataChannel","channel","channelText","twoColumnBrowseResultsRenderer","retorno","Promise","all","map"],"mappings":"AAAA,SAAQA,cAAR,EAAwBC,YAAxB,QAA4C,gCAA5C;;AAEA,MAAMC,0BAA0B,GAAGC,IAAI,IAAIA,IAAI,IAAIA,IAAI,CAACC,MAAL,CACvCC,GAAG,IAAIA,GAAG,CAACC,WAAJ,IAAmBD,GAAG,CAACC,WAAJ,CAAgBC,OADH,EAErC,CAFqC,EAGtCD,WAHsC,CAItCC,OAJsC,CAKtCC,mBALsC,CAMtCC,QANsC,CAM7B,CAN6B,EAOtCC,mBAPsC,CAQtCD,QARsC,CAQ7B,CAR6B,EAStCE,YATsC,CAUtCC,KAVb;;AAYA,MAAMC,QAAQ,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMC,SAAS,GAAG,MAAMd,YAAY,CAACa,OAAD,CAApC;AACA,QAAME,OAAO,GAAGD,SAAS,CAACE,KAAV,CAAgB,8BAAhB,EAAgD,CAAhD,EAAmDA,KAAnD,CAAyD,GAAzD,EAA8D,CAA9D,CAAhB;AACA,QAAMC,IAAI,GAAG,MAAMC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAnB;AACA,QAAMK,iBAAiB,GAAG,MAAMH,IAAI,CAACT,QAAL,CACfa,yBADe,CAEfC,OAFe,CAGfA,OAHe,CAIfd,QAJe,CAIN,CAJM,EAKfe,wBALjB,CAJ8B,CAU9B;;AACA,SAAO;AACC,eAAYH,iBAAiB,CAACP,OAD/B;AAEC,iBAAcO,iBAAiB,CAACI,SAAlB,CAA4BC,UAF3C;AAGC,aAAUL,iBAAiB,CAACM,KAAlB,CAAwBC,UAHnC;AAIC,yBAAsBP,iBAAiB,CAACQ,iBAAlB,CAAoCD,UAJ3D;AAKC,qBAAkBP,iBAAiB,CAACS,aAAlB,CAAgCF;AALnD,GAAP;AAOH,CAlBD;;AAqBA,MAAMG,cAAc,GAAG,MAAMC,OAAN,IAAiB;AACtC,QAAMC,WAAW,GAAG,MAAMjC,cAAc,CAACgC,OAAD,CAAxC;AACA,QAAMhB,OAAO,GAAGiB,WAAW,CAAChB,KAAZ,CAAkB,8BAAlB,EAAkD,CAAlD,EAAqDA,KAArD,CAA2D,GAA3D,EAAgE,CAAhE,CAAhB;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAb;AACA,QAAMb,IAAI,GAAGe,IAAI,CAACT,QAAL,CAAcyB,8BAAd,CAA6C/B,IAA1D;AAEA,QAAMS,KAAK,GAAG,MAAMV,0BAA0B,CAACC,IAAD,CAA9C;AACA,QAAMgC,OAAO,GAAGC,OAAO,CAACC,GAAR,CACVzB,KAAK,CAAC0B,GAAN,CAAU,OAAO;AAAEjB,IAAAA;AAAF,GAAP,KAAiC,MAAMR,QAAQ,CAACQ,iBAAiB,CAACP,OAAnB,CAAzD,CADU,CAAhB,CAPsC,CAYxC;;AACE,SAAOqB,OAAP;AAGD,CAhBD;;AAiBA,SAASJ,cAAT,EAAyBlB,QAAzB","sourcesContent":["import {GetChannelText, GetVideoText } from \"../connector/youtube.connector\";\n\nconst _tabsConvertToGridRenderer = tabs => tabs && tabs.filter(\n            tab => tab.tabRenderer && tab.tabRenderer.content\n            )[0]\n            .tabRenderer\n            .content\n            .sectionListRenderer\n            .contents[0]\n            .itemSectionRenderer\n            .contents[0]\n            .gridRenderer\n            .items;\n\nconst GetVideo = async videoId => {\n    const videoText = await GetVideoText(videoId);\n    const preJson = videoText.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0]\n    const json = await JSON.parse(preJson);        \n    const gridVideoRenderer = await json.contents\n                    .twoColumnWatchNextResults\n                    .results\n                    .results\n                    .contents[0]\n                    .videoPrimaryInfoRenderer;\n    //console.log(gridVideoRenderer);\n    return {\n            \"videoId\" : gridVideoRenderer.videoId,\n            \"thumbnail\" : gridVideoRenderer.thumbnail.thumbnails,\n            \"title\" : gridVideoRenderer.title.simpleText,\n            \"publishedTimeText\" : gridVideoRenderer.publishedTimeText.simpleText,\n            \"viewCountText\" : gridVideoRenderer.viewCountText.simpleText\n      };\n}\n\n\nconst GetDataChannel = async channel => {\n  const channelText = await GetChannelText(channel);\n  const preJson = channelText.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0]\n  const json = JSON.parse(preJson);        \n  const tabs = json.contents.twoColumnBrowseResultsRenderer.tabs;\n\n  const items = await _tabsConvertToGridRenderer(tabs);\n  const retorno = Promise.all(\n        items.map(async ({ gridVideoRenderer }) => await GetVideo(gridVideoRenderer.videoId))     \n  )\n\n\n//  console.log(retorno)\n  return retorno\n\n\n}\nexport { GetDataChannel, GetVideo };\n"]},"metadata":{},"sourceType":"module"}
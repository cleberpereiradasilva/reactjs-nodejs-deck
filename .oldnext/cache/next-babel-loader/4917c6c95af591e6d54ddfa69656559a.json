{"ast":null,"code":"import { getFromUrl } from \"../../shared\";\n\nconst urlChannel = channel => `https://www.youtube.com/c/${channel}/videos`;\n\nconst urlVideo = videoId => `https://www.youtube.com/watch?v=${videoId}`;\n\nconst GetChannelText = async channel => {\n  const url = urlChannel(channel);\n  return await getFromUrl(url);\n};\n\nconst GetVideoText = async videoId => {\n  const url = urlVideo(videoId);\n  return await getFromUrl(url);\n};\n\nconst GetChannelJson = async channel => {\n  try {\n    const url = urlChannel(channel);\n    const response = await fetch(url);\n    const content = await response.text();\n    const preJson = content.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0];\n    const json = JSON.parse(preJson);\n    return json.contents.twoColumnBrowseResultsRenderer.tabs;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst GetVideoJson = async videoId => {\n  try {\n    const url = urlVideo(videoId);\n    const response = await fetch(url);\n    const content = await response.text();\n    const preJson = content.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0];\n    const json = JSON.parse(preJson);\n    return json.contents.twoColumnWatchNextResults.results.results.contents[0].videoPrimaryInfoRenderer;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport { GetChannelText, GetVideoJson };","map":{"version":3,"sources":["/home/noct/Trabalho/my-git/reactjs-nodejs-deck/src/services/youtube/connector/youtube.connector.ts"],"names":["getFromUrl","urlChannel","channel","urlVideo","videoId","GetChannelText","url","GetVideoText","GetChannelJson","response","fetch","content","text","preJson","split","json","JSON","parse","contents","twoColumnBrowseResultsRenderer","tabs","error","console","log","GetVideoJson","twoColumnWatchNextResults","results","videoPrimaryInfoRenderer"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,cAAzB;;AAEA,MAAMC,UAAU,GAAIC,OAAD,IAAsB,6BAA4BA,OAAQ,SAA7E;;AACA,MAAMC,QAAQ,GAAIC,OAAD,IAAsB,mCAAkCA,OAAQ,EAAjF;;AAEA,MAAMC,cAAc,GAAG,MAAOH,OAAP,IAA4B;AAC/C,QAAMI,GAAG,GAAGL,UAAU,CAACC,OAAD,CAAtB;AACA,SAAO,MAAMF,UAAU,CAACM,GAAD,CAAvB;AACH,CAHD;;AAKA,MAAMC,YAAY,GAAG,MAAOH,OAAP,IAA4B;AAC7C,QAAME,GAAG,GAAGH,QAAQ,CAACC,OAAD,CAApB;AACA,SAAO,MAAMJ,UAAU,CAACM,GAAD,CAAvB;AACH,CAHD;;AAMA,MAAME,cAAc,GAAG,MAAON,OAAP,IAA4B;AACjD,MAAI;AACE,UAAMI,GAAG,GAAGL,UAAU,CAACC,OAAD,CAAtB;AACA,UAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAD,CAA5B;AACA,UAAMK,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;AACA,UAAMC,OAAO,GAAGF,OAAO,CAACG,KAAR,CAAc,8BAAd,EAA8C,CAA9C,EAAiDA,KAAjD,CAAuD,GAAvD,EAA4D,CAA5D,CAAhB;AACA,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAb;AACA,WAAOE,IAAI,CAACG,QAAL,CAAcC,8BAAd,CAA6CC,IAApD;AACL,GAPD,CAOE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAXD;;AAaA,MAAMG,YAAY,GAAG,MAAOpB,OAAP,IAA4B;AAC/C,MAAI;AACE,UAAME,GAAG,GAAGH,QAAQ,CAACC,OAAD,CAApB;AACA,UAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAD,CAA5B;AACA,UAAMK,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;AACA,UAAMC,OAAO,GAAGF,OAAO,CAACG,KAAR,CAAc,8BAAd,EAA8C,CAA9C,EAAiDA,KAAjD,CAAuD,GAAvD,EAA4D,CAA5D,CAAhB;AACA,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAb;AACA,WAAOE,IAAI,CAACG,QAAL,CAAcO,yBAAd,CAAwCC,OAAxC,CAAgDA,OAAhD,CAAwDR,QAAxD,CAAiE,CAAjE,EAAoES,wBAA3E;AACL,GAPD,CAOE,OAAON,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAXD;;AAaA,SAAShB,cAAT,EAAyBmB,YAAzB","sourcesContent":["import {getFromUrl} from \"../../shared\";\n\nconst urlChannel = (channel: string) => `https://www.youtube.com/c/${channel}/videos`\nconst urlVideo = (videoId: string) => `https://www.youtube.com/watch?v=${videoId}`\n\nconst GetChannelText = async (channel : string) => {\n    const url = urlChannel(channel);\n    return await getFromUrl(url);\n};\n\nconst GetVideoText = async (videoId : string) => {\n    const url = urlVideo(videoId);\n    return await getFromUrl(url);\n};\n\n\nconst GetChannelJson = async (channel : string) => {\n  try {\n        const url = urlChannel(channel);\n        const response = await fetch(url);\n        const content = await response.text()\n        const preJson = content.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0]\n        const json = JSON.parse(preJson);        \n        return json.contents.twoColumnBrowseResultsRenderer.tabs;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst GetVideoJson = async (videoId : string) => {\n  try {\n        const url = urlVideo(videoId);\n        const response = await fetch(url);\n        const content = await response.text()\n        const preJson = content.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0]\n        const json = JSON.parse(preJson);        \n        return json.contents.twoColumnWatchNextResults.results.results.contents[0].videoPrimaryInfoRenderer;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport { GetChannelText, GetVideoJson}\n\n\n\n"]},"metadata":{},"sourceType":"module"}
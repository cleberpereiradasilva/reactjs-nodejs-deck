{"ast":null,"code":"import cheerio from 'cheerio';\nimport { GetChannelJson, GetVideoJson } from \"../connector/vimeo.connector\";\n\nconst _liConverterToJson = body => {\n  const $ = cheerio.load(body);\n  const items = $('li').toArray();\n  const json = [];\n  items.map(async item => {\n    //TODO usar o GetVideo....\n    const videoId = $(item).attr('id').replace(\"clip\", \"\");\n    const videoBody = await GetVideoJson(videoId);\n    const videoJson = getVideo(videoBody); //console.log(videoJson);\n\n    json.push(videoJson);\n    console.log('----');\n  });\n  return json;\n};\n\nconst getVideo = videoBody => {\n  const initScript = videoBody.split('<script type=\"application/ld+json\">')[1];\n  const data = initScript.split('</script>')[0].trim();\n  const json = JSON.parse(data)[0];\n  const viewsCount = videoBody.split('class=\"clip-notification')[1].split('svg')[0];\n  console.log(\"count\", viewsCount);\n  const videoJson = {\n    \"videoId\": json.url.split('/').pop(),\n    \"thumbnail\": [json.thumbnailUrl],\n    \"title\": json.name,\n    \"description\": json.description,\n    \"publishedTimeText\": json.uploadDate,\n    \"viewCountText\": \"\"\n  };\n  return videoJson;\n};\n\nconst GetDataChannel = async channel => {\n  const tabs = await GetChannelJson(channel);\n  const $ = cheerio.load(tabs);\n  const ol = $('#clips');\n\n  const json = _liConverterToJson(ol.html()); //li.find('li').map(item => console.log('xx'));\n\n\n  return json;\n};\n\nexport { GetDataChannel, GetVideoJson as GetVideo };","map":{"version":3,"sources":["/home/noct/Trabalho/my-git/reactjs-nodejs-deck/src/services/vimeo/facade/vimeo.facade.ts"],"names":["cheerio","GetChannelJson","GetVideoJson","_liConverterToJson","body","$","load","items","toArray","json","map","item","videoId","attr","replace","videoBody","videoJson","getVideo","push","console","log","initScript","split","data","trim","JSON","parse","viewsCount","url","pop","thumbnailUrl","name","description","uploadDate","GetDataChannel","channel","tabs","ol","html","GetVideo"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAAQC,cAAR,EAAwBC,YAAxB,QAA2C,8BAA3C;;AAEA,MAAMC,kBAAkB,GAAGC,IAAI,IAAI;AAC/B,QAAMC,CAAC,GAAGL,OAAO,CAACM,IAAR,CAAaF,IAAb,CAAV;AACA,QAAMG,KAAK,GAAGF,CAAC,CAAC,IAAD,CAAD,CAAQG,OAAR,EAAd;AACA,QAAMC,IAAI,GAAG,EAAb;AAEAF,EAAAA,KAAK,CAACG,GAAN,CAAU,MAAMC,IAAN,IAAc;AACpB;AACA,UAAMC,OAAO,GAAGP,CAAC,CAACM,IAAD,CAAD,CAAQE,IAAR,CAAa,IAAb,EAAmBC,OAAnB,CAA2B,MAA3B,EAAkC,EAAlC,CAAhB;AACA,UAAMC,SAAS,GAAG,MAAMb,YAAY,CAACU,OAAD,CAApC;AACA,UAAMI,SAAS,GAAGC,QAAQ,CAACF,SAAD,CAA1B,CAJoB,CAKpB;;AACAN,IAAAA,IAAI,CAACS,IAAL,CAAUF,SAAV;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,GARD;AAUA,SAAOX,IAAP;AACH,CAhBD;;AAkBA,MAAMQ,QAAQ,GAAGF,SAAS,IAAI;AAC1B,QAAMM,UAAU,GAAGN,SAAS,CAACO,KAAV,CAAgB,qCAAhB,EAAuD,CAAvD,CAAnB;AACA,QAAMC,IAAI,GAAGF,UAAU,CAACC,KAAX,CAAiB,WAAjB,EAA8B,CAA9B,EAAiCE,IAAjC,EAAb;AACA,QAAMf,IAAI,GAAGgB,IAAI,CAACC,KAAL,CAAWH,IAAX,EAAiB,CAAjB,CAAb;AACA,QAAMI,UAAU,GAAGZ,SAAS,CAACO,KAAV,CAAgB,0BAAhB,EAA4C,CAA5C,EAA+CA,KAA/C,CAAqD,KAArD,EAA4D,CAA5D,CAAnB;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBO,UAArB;AACA,QAAMX,SAAS,GAAG;AACZ,eAAYP,IAAI,CAACmB,GAAL,CAASN,KAAT,CAAe,GAAf,EAAoBO,GAApB,EADA;AAEZ,iBAAc,CAACpB,IAAI,CAACqB,YAAN,CAFF;AAGZ,aAAUrB,IAAI,CAACsB,IAHH;AAIZ,mBAAgBtB,IAAI,CAACuB,WAJT;AAKZ,yBAAsBvB,IAAI,CAACwB,UALf;AAMZ,qBAAkB;AANN,GAAlB;AAQA,SAAOjB,SAAP;AACH,CAfD;;AAkBA,MAAMkB,cAAc,GAAG,MAAMC,OAAN,IAAiB;AACtC,QAAMC,IAAI,GAAG,MAAMnC,cAAc,CAACkC,OAAD,CAAjC;AACA,QAAM9B,CAAC,GAAGL,OAAO,CAACM,IAAR,CAAa8B,IAAb,CAAV;AACA,QAAMC,EAAE,GAAGhC,CAAC,CAAC,QAAD,CAAZ;;AACA,QAAMI,IAAI,GAAGN,kBAAkB,CAACkC,EAAE,CAACC,IAAH,EAAD,CAA/B,CAJsC,CAKtC;;;AACA,SAAO7B,IAAP;AACD,CAPD;;AAQA,SAASyB,cAAT,EAAyBhC,YAAY,IAAIqC,QAAzC","sourcesContent":["import cheerio from 'cheerio'\nimport {GetChannelJson, GetVideoJson} from \"../connector/vimeo.connector\";\n\nconst _liConverterToJson = body => { \n    const $ = cheerio.load(body)\n    const items = $('li').toArray();\n    const json = []\n\n    items.map(async item => {\n        //TODO usar o GetVideo....\n        const videoId = $(item).attr('id').replace(\"clip\",\"\");\n        const videoBody = await GetVideoJson(videoId);\n        const videoJson = getVideo(videoBody);\n        //console.log(videoJson);\n        json.push(videoJson);\n        console.log('----')\n    })\n\n    return json;\n};\n\nconst getVideo = videoBody => {\n    const initScript = videoBody.split('<script type=\"application/ld+json\">')[1];\n    const data = initScript.split('</script>')[0].trim();\n    const json = JSON.parse(data)[0];\n    const viewsCount = videoBody.split('class=\"clip-notification')[1].split('svg')[0];\n    console.log(\"count\", viewsCount)\n    const videoJson = {\n          \"videoId\" : json.url.split('/').pop(),\n          \"thumbnail\" : [json.thumbnailUrl],\n          \"title\" : json.name,\n          \"description\" : json.description,\n          \"publishedTimeText\" : json.uploadDate,\n          \"viewCountText\" : \"\",\n    }\n    return videoJson;\n};\n\n\nconst GetDataChannel = async channel => {\n  const tabs = await GetChannelJson(channel);\n  const $ = cheerio.load(tabs)\n  const ol = $('#clips');\n  const json = _liConverterToJson(ol.html());\n  //li.find('li').map(item => console.log('xx'));\n  return json;\n}\nexport { GetDataChannel, GetVideoJson as GetVideo };\n"]},"metadata":{},"sourceType":"module"}
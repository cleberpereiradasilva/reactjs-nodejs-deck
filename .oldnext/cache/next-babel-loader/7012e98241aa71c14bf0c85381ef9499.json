{"ast":null,"code":"import { GetChannelText, GetVideoText } from \"../connector/youtube.connector\";\n\nconst _tabsConvertToGridRenderer = tabs => tabs && tabs.filter(tab => tab.tabRenderer && tab.tabRenderer.content)[0].tabRenderer.content.sectionListRenderer.contents[0].itemSectionRenderer.contents[0].gridRenderer.items;\n\nconst GetVideo = async videoId => {\n  const videoText = await GetVideoText(videoId);\n  const preJson = videoText.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\"if (window.ytcsi)\")[0].trim();\n  return preJson;\n  const json = await JSON.parse(preJson);\n  return json;\n  const gridVideoRenderer = await json.contents.twoColumnWatchNextResults.results.results.contents[0]; // .videoPrimaryInfoRenderer;\n  //console.log(gridVideoRenderer.videoId);\n\n  console.log('---');\n  return \"\";\n  /*\n  return {\n          \"videoId\" : gridVideoRenderer.videoId,\n          \"thumbnail\" : gridVideoRenderer.thumbnail.thumbnails,\n          \"title\" : gridVideoRenderer.title.simpleText,\n          \"publishedTimeText\" : gridVideoRenderer.publishedTimeText.simpleText,\n          \"viewCountText\" : gridVideoRenderer.viewCountText.simpleText\n    };\n   */\n};\n\nconst GetDataChannel = async channel => {\n  const channelText = await GetChannelText(channel);\n  const preJson = channelText.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0];\n  const json = JSON.parse(preJson);\n  const tabs = json.contents.twoColumnBrowseResultsRenderer.tabs;\n  const items = await _tabsConvertToGridRenderer(tabs);\n  return Promise.all(items.map(async ({\n    gridVideoRenderer\n  }) => await GetVideo(gridVideoRenderer.videoId)));\n};\n\nexport { GetDataChannel, GetVideo };","map":{"version":3,"sources":["/home/noct/Trabalho/my-git/reactjs-nodejs-deck/src/services/youtube/facade/youtube.facade.ts"],"names":["GetChannelText","GetVideoText","_tabsConvertToGridRenderer","tabs","filter","tab","tabRenderer","content","sectionListRenderer","contents","itemSectionRenderer","gridRenderer","items","GetVideo","videoId","videoText","preJson","split","trim","json","JSON","parse","gridVideoRenderer","twoColumnWatchNextResults","results","console","log","GetDataChannel","channel","channelText","twoColumnBrowseResultsRenderer","Promise","all","map"],"mappings":"AAAA,SAAQA,cAAR,EAAwBC,YAAxB,QAA4C,gCAA5C;;AAEA,MAAMC,0BAA0B,GAAGC,IAAI,IAAIA,IAAI,IAAIA,IAAI,CAACC,MAAL,CACvCC,GAAG,IAAIA,GAAG,CAACC,WAAJ,IAAmBD,GAAG,CAACC,WAAJ,CAAgBC,OADH,EAErC,CAFqC,EAGtCD,WAHsC,CAItCC,OAJsC,CAKtCC,mBALsC,CAMtCC,QANsC,CAM7B,CAN6B,EAOtCC,mBAPsC,CAQtCD,QARsC,CAQ7B,CAR6B,EAStCE,YATsC,CAUtCC,KAVb;;AAYA,MAAMC,QAAQ,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMC,SAAS,GAAG,MAAMd,YAAY,CAACa,OAAD,CAApC;AACA,QAAME,OAAO,GAAGD,SAAS,CAACE,KAAV,CAAgB,8BAAhB,EAAgD,CAAhD,EACHA,KADG,CACG,mBADH,EACwB,CADxB,EAEHC,IAFG,EAAhB;AAGA,SAAOF,OAAP;AACA,QAAMG,IAAI,GAAG,MAAMC,IAAI,CAACC,KAAL,CAAWL,OAAX,CAAnB;AACA,SAAOG,IAAP;AAEA,QAAMG,iBAAiB,GAAG,MAAMH,IAAI,CAACV,QAAL,CACfc,yBADe,CAEfC,OAFe,CAGfA,OAHe,CAIff,QAJe,CAIN,CAJM,CAAhC,CAT8B,CAcf;AACf;;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,SAAO,EAAP;AACA;;;;;;;;;AASH,CA3BD;;AA8BA,MAAMC,cAAc,GAAG,MAAMC,OAAN,IAAiB;AACtC,QAAMC,WAAW,GAAG,MAAM7B,cAAc,CAAC4B,OAAD,CAAxC;AACA,QAAMZ,OAAO,GAAGa,WAAW,CAACZ,KAAZ,CAAkB,8BAAlB,EAAkD,CAAlD,EAAqDA,KAArD,CAA2D,GAA3D,EAAgE,CAAhE,CAAhB;AACA,QAAME,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWL,OAAX,CAAb;AACA,QAAMb,IAAI,GAAGgB,IAAI,CAACV,QAAL,CAAcqB,8BAAd,CAA6C3B,IAA1D;AACA,QAAMS,KAAK,GAAG,MAAMV,0BAA0B,CAACC,IAAD,CAA9C;AACA,SAAO4B,OAAO,CAACC,GAAR,CACDpB,KAAK,CAACqB,GAAN,CAAU,OAAO;AAAEX,IAAAA;AAAF,GAAP,KAAiC,MAAMT,QAAQ,CAACS,iBAAiB,CAACR,OAAnB,CAAzD,CADC,CAAP;AAID,CAVD;;AAWA,SAASa,cAAT,EAAyBd,QAAzB","sourcesContent":["import {GetChannelText, GetVideoText } from \"../connector/youtube.connector\";\n\nconst _tabsConvertToGridRenderer = tabs => tabs && tabs.filter(\n            tab => tab.tabRenderer && tab.tabRenderer.content\n            )[0]\n            .tabRenderer\n            .content\n            .sectionListRenderer\n            .contents[0]\n            .itemSectionRenderer\n            .contents[0]\n            .gridRenderer\n            .items;\n\nconst GetVideo = async videoId => {\n    const videoText = await GetVideoText(videoId);\n    const preJson = videoText.split(\"window[\\\"ytInitialData\\\"] = \")[1]\n                .split(\"if (window.ytcsi)\")[0]\n                .trim()\n    return preJson;\n    const json = await JSON.parse(preJson);        \n    return json\n\n    const gridVideoRenderer = await json.contents\n                    .twoColumnWatchNextResults\n                    .results\n                    .results\n                    .contents[0]\n                   // .videoPrimaryInfoRenderer;\n    //console.log(gridVideoRenderer.videoId);\n    console.log('---')\n    return \"\"\n    /*\n    return {\n            \"videoId\" : gridVideoRenderer.videoId,\n            \"thumbnail\" : gridVideoRenderer.thumbnail.thumbnails,\n            \"title\" : gridVideoRenderer.title.simpleText,\n            \"publishedTimeText\" : gridVideoRenderer.publishedTimeText.simpleText,\n            \"viewCountText\" : gridVideoRenderer.viewCountText.simpleText\n      };\n     */\n}\n\n\nconst GetDataChannel = async channel => {\n  const channelText = await GetChannelText(channel);\n  const preJson = channelText.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0]\n  const json = JSON.parse(preJson);        \n  const tabs = json.contents.twoColumnBrowseResultsRenderer.tabs;\n  const items = await _tabsConvertToGridRenderer(tabs);\n  return Promise.all(\n        items.map(async ({ gridVideoRenderer }) => await GetVideo(gridVideoRenderer.videoId))     \n  )\n\n}\nexport { GetDataChannel, GetVideo };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import cheerio from 'cheerio';\nimport { GetChannelJson, GetVideoJson } from \"../connector/vimeo.connector\";\n\nconst _liConverterToJson = body => {\n  const $ = cheerio.load(body);\n  const items = $('li').toArray();\n  const json = [];\n  items.map(async item => {\n    //TODO usar o GetVideo....\n    const videoId = $(item).attr('id').replace(\"clip\", \"\");\n    const videoBody = await GetVideoJson(videoId);\n    const videoJson = getVideo(videoBody); //console.log(videoJson);\n\n    json.push(videoJson);\n    console.log('----');\n  });\n  return json;\n};\n\nconst getViews = videoBody => {\n  const $ = cheerio.load(videoBody);\n  const main = $('main');\n  console.log(main.html());\n};\n\nconst getVideo = videoBody => {\n  const initScript = videoBody.split('<script type=\"application/ld+json\">')[1];\n  const data = initScript.split('</script>')[0].trim();\n  const json = JSON.parse(data)[0];\n  getViews(videoBody);\n  console.log(\"count\", viewsCount);\n  const videoJson = {\n    \"videoId\": json.url.split('/').pop(),\n    \"thumbnail\": [json.thumbnailUrl],\n    \"title\": json.name,\n    \"description\": json.description,\n    \"publishedTimeText\": json.uploadDate,\n    \"viewCountText\": \"\"\n  };\n  return videoJson;\n};\n\nconst GetDataChannel = async channel => {\n  const tabs = await GetChannelJson(channel);\n  const $ = cheerio.load(tabs);\n  const ol = $('#clips');\n\n  const json = _liConverterToJson(ol.html()); //li.find('li').map(item => console.log('xx'));\n\n\n  return json;\n};\n\nexport { GetDataChannel, GetVideoJson as GetVideo };","map":{"version":3,"sources":["/home/noct/Trabalho/my-git/reactjs-nodejs-deck/src/services/vimeo/facade/vimeo.facade.ts"],"names":["cheerio","GetChannelJson","GetVideoJson","_liConverterToJson","body","$","load","items","toArray","json","map","item","videoId","attr","replace","videoBody","videoJson","getVideo","push","console","log","getViews","main","html","initScript","split","data","trim","JSON","parse","viewsCount","url","pop","thumbnailUrl","name","description","uploadDate","GetDataChannel","channel","tabs","ol","GetVideo"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAAQC,cAAR,EAAwBC,YAAxB,QAA2C,8BAA3C;;AAEA,MAAMC,kBAAkB,GAAGC,IAAI,IAAI;AAC/B,QAAMC,CAAC,GAAGL,OAAO,CAACM,IAAR,CAAaF,IAAb,CAAV;AACA,QAAMG,KAAK,GAAGF,CAAC,CAAC,IAAD,CAAD,CAAQG,OAAR,EAAd;AACA,QAAMC,IAAI,GAAG,EAAb;AAEAF,EAAAA,KAAK,CAACG,GAAN,CAAU,MAAMC,IAAN,IAAc;AACpB;AACA,UAAMC,OAAO,GAAGP,CAAC,CAACM,IAAD,CAAD,CAAQE,IAAR,CAAa,IAAb,EAAmBC,OAAnB,CAA2B,MAA3B,EAAkC,EAAlC,CAAhB;AACA,UAAMC,SAAS,GAAG,MAAMb,YAAY,CAACU,OAAD,CAApC;AACA,UAAMI,SAAS,GAAGC,QAAQ,CAACF,SAAD,CAA1B,CAJoB,CAKpB;;AACAN,IAAAA,IAAI,CAACS,IAAL,CAAUF,SAAV;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,GARD;AAUA,SAAOX,IAAP;AACH,CAhBD;;AAkBA,MAAMY,QAAQ,GAAGN,SAAS,IAAI;AAC1B,QAAMV,CAAC,GAAGL,OAAO,CAACM,IAAR,CAAaS,SAAb,CAAV;AACA,QAAMO,IAAI,GAAGjB,CAAC,CAAC,MAAD,CAAd;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACC,IAAL,EAAZ;AAGH,CAND;;AAQA,MAAMN,QAAQ,GAAGF,SAAS,IAAI;AAC1B,QAAMS,UAAU,GAAGT,SAAS,CAACU,KAAV,CAAgB,qCAAhB,EAAuD,CAAvD,CAAnB;AACA,QAAMC,IAAI,GAAGF,UAAU,CAACC,KAAX,CAAiB,WAAjB,EAA8B,CAA9B,EAAiCE,IAAjC,EAAb;AACA,QAAMlB,IAAI,GAAGmB,IAAI,CAACC,KAAL,CAAWH,IAAX,EAAiB,CAAjB,CAAb;AACAL,EAAAA,QAAQ,CAACN,SAAD,CAAR;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBU,UAArB;AACA,QAAMd,SAAS,GAAG;AACZ,eAAYP,IAAI,CAACsB,GAAL,CAASN,KAAT,CAAe,GAAf,EAAoBO,GAApB,EADA;AAEZ,iBAAc,CAACvB,IAAI,CAACwB,YAAN,CAFF;AAGZ,aAAUxB,IAAI,CAACyB,IAHH;AAIZ,mBAAgBzB,IAAI,CAAC0B,WAJT;AAKZ,yBAAsB1B,IAAI,CAAC2B,UALf;AAMZ,qBAAkB;AANN,GAAlB;AAQA,SAAOpB,SAAP;AACH,CAfD;;AAkBA,MAAMqB,cAAc,GAAG,MAAMC,OAAN,IAAiB;AACtC,QAAMC,IAAI,GAAG,MAAMtC,cAAc,CAACqC,OAAD,CAAjC;AACA,QAAMjC,CAAC,GAAGL,OAAO,CAACM,IAAR,CAAaiC,IAAb,CAAV;AACA,QAAMC,EAAE,GAAGnC,CAAC,CAAC,QAAD,CAAZ;;AACA,QAAMI,IAAI,GAAGN,kBAAkB,CAACqC,EAAE,CAACjB,IAAH,EAAD,CAA/B,CAJsC,CAKtC;;;AACA,SAAOd,IAAP;AACD,CAPD;;AAQA,SAAS4B,cAAT,EAAyBnC,YAAY,IAAIuC,QAAzC","sourcesContent":["import cheerio from 'cheerio'\nimport {GetChannelJson, GetVideoJson} from \"../connector/vimeo.connector\";\n\nconst _liConverterToJson = body => { \n    const $ = cheerio.load(body)\n    const items = $('li').toArray();\n    const json = []\n\n    items.map(async item => {\n        //TODO usar o GetVideo....\n        const videoId = $(item).attr('id').replace(\"clip\",\"\");\n        const videoBody = await GetVideoJson(videoId);\n        const videoJson = getVideo(videoBody);\n        //console.log(videoJson);\n        json.push(videoJson);\n        console.log('----')\n    })\n\n    return json;\n};\n\nconst getViews = videoBody => {\n    const $ = cheerio.load(videoBody);\n    const main = $('main');\n    console.log(main.html());\n\n\n}\n\nconst getVideo = videoBody => {\n    const initScript = videoBody.split('<script type=\"application/ld+json\">')[1];\n    const data = initScript.split('</script>')[0].trim();\n    const json = JSON.parse(data)[0];\n    getViews(videoBody);\n    console.log(\"count\", viewsCount)\n    const videoJson = {\n          \"videoId\" : json.url.split('/').pop(),\n          \"thumbnail\" : [json.thumbnailUrl],\n          \"title\" : json.name,\n          \"description\" : json.description,\n          \"publishedTimeText\" : json.uploadDate,\n          \"viewCountText\" : \"\",\n    }\n    return videoJson;\n};\n\n\nconst GetDataChannel = async channel => {\n  const tabs = await GetChannelJson(channel);\n  const $ = cheerio.load(tabs)\n  const ol = $('#clips');\n  const json = _liConverterToJson(ol.html());\n  //li.find('li').map(item => console.log('xx'));\n  return json;\n}\nexport { GetDataChannel, GetVideoJson as GetVideo };\n"]},"metadata":{},"sourceType":"module"}
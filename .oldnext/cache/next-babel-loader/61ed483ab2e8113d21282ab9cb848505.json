{"ast":null,"code":"import { GetChannelText, GetVideoJson } from \"../connector/youtube.connector\";\n\nconst _tabsConvertToGridRenderer = tabs => tabs && tabs.filter(tab => tab.tabRenderer && tab.tabRenderer.content)[0].tabRenderer.content.sectionListRenderer.contents[0].itemSectionRenderer.contents[0].gridRenderer.items;\n\nconst getVideo = gridVideoRenderer => ({\n  \"videoId\": gridVideoRenderer.videoId,\n  \"thumbnail\": gridVideoRenderer.thumbnail.thumbnails,\n  \"title\": gridVideoRenderer.title.simpleText,\n  \"publishedTimeText\": gridVideoRenderer.publishedTimeText.simpleText,\n  \"viewCountText\": gridVideoRenderer.viewCountText.simpleText\n});\n\nconst GetChannelJson = async channel => {\n  try {\n    const url = urlChannel(channel);\n    const response = await fetch(url);\n    const content = await response.text();\n    const preJson = content.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0];\n    const json = JSON.parse(preJson);\n    return json.contents.twoColumnBrowseResultsRenderer.tabs;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst GetDataChannel = async channel => {\n  const tabs = await GetChannelText(channel);\n  const items = await _tabsConvertToGridRenderer(tabs);\n  return items.reduce((acc, {\n    gridVideoRenderer\n  }) => {\n    return acc.concat([getVideo(gridVideoRenderer)]);\n  }, []);\n};\n\nexport { GetDataChannel, GetVideoJson as GetVideo };","map":{"version":3,"sources":["/home/noct/Trabalho/my-git/reactjs-nodejs-deck/src/services/youtube/facade/youtube.facade.ts"],"names":["GetChannelText","GetVideoJson","_tabsConvertToGridRenderer","tabs","filter","tab","tabRenderer","content","sectionListRenderer","contents","itemSectionRenderer","gridRenderer","items","getVideo","gridVideoRenderer","videoId","thumbnail","thumbnails","title","simpleText","publishedTimeText","viewCountText","GetChannelJson","channel","url","urlChannel","response","fetch","text","preJson","split","json","JSON","parse","twoColumnBrowseResultsRenderer","error","console","log","GetDataChannel","reduce","acc","concat","GetVideo"],"mappings":"AAAA,SAAQA,cAAR,EAAwBC,YAAxB,QAA2C,gCAA3C;;AAEA,MAAMC,0BAA0B,GAAGC,IAAI,IAAIA,IAAI,IAAIA,IAAI,CAACC,MAAL,CACvCC,GAAG,IAAIA,GAAG,CAACC,WAAJ,IAAmBD,GAAG,CAACC,WAAJ,CAAgBC,OADH,EAErC,CAFqC,EAGtCD,WAHsC,CAItCC,OAJsC,CAKtCC,mBALsC,CAMtCC,QANsC,CAM7B,CAN6B,EAOtCC,mBAPsC,CAQtCD,QARsC,CAQ7B,CAR6B,EAStCE,YATsC,CAUtCC,KAVb;;AAYA,MAAMC,QAAQ,GAAGC,iBAAiB,KAAK;AAC7B,aAAYA,iBAAiB,CAACC,OADD;AAE7B,eAAcD,iBAAiB,CAACE,SAAlB,CAA4BC,UAFb;AAG7B,WAAUH,iBAAiB,CAACI,KAAlB,CAAwBC,UAHL;AAI7B,uBAAsBL,iBAAiB,CAACM,iBAAlB,CAAoCD,UAJ7B;AAK7B,mBAAkBL,iBAAiB,CAACO,aAAlB,CAAgCF;AALrB,CAAL,CAAlC;;AAQA,MAAMG,cAAc,GAAG,MAAOC,OAAP,IAA4B;AACjD,MAAI;AACE,UAAMC,GAAG,GAAGC,UAAU,CAACF,OAAD,CAAtB;AACA,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,CAA5B;AACA,UAAMjB,OAAO,GAAG,MAAMmB,QAAQ,CAACE,IAAT,EAAtB;AACA,UAAMC,OAAO,GAAGtB,OAAO,CAACuB,KAAR,CAAc,8BAAd,EAA8C,CAA9C,EAAiDA,KAAjD,CAAuD,GAAvD,EAA4D,CAA5D,CAAhB;AACA,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAb;AACA,WAAOE,IAAI,CAACtB,QAAL,CAAcyB,8BAAd,CAA6C/B,IAApD;AACL,GAPD,CAOE,OAAOgC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAXD;;AAaA,MAAMG,cAAc,GAAG,MAAMf,OAAN,IAAiB;AACtC,QAAMpB,IAAI,GAAG,MAAMH,cAAc,CAACuB,OAAD,CAAjC;AACA,QAAMX,KAAK,GAAG,MAAMV,0BAA0B,CAACC,IAAD,CAA9C;AACA,SAAOS,KAAK,CAAC2B,MAAN,CAAc,CAACC,GAAD,EAAM;AAAE1B,IAAAA;AAAF,GAAN,KAAgC;AACjD,WAAO0B,GAAG,CAACC,MAAJ,CAAW,CAAC5B,QAAQ,CAACC,iBAAD,CAAT,CAAX,CAAP;AACF,GAFK,EAEJ,EAFI,CAAP;AAID,CAPD;;AAQA,SAASwB,cAAT,EAAyBrC,YAAY,IAAIyC,QAAzC","sourcesContent":["import {GetChannelText, GetVideoJson} from \"../connector/youtube.connector\";\n\nconst _tabsConvertToGridRenderer = tabs => tabs && tabs.filter(\n            tab => tab.tabRenderer && tab.tabRenderer.content\n            )[0]\n            .tabRenderer\n            .content\n            .sectionListRenderer\n            .contents[0]\n            .itemSectionRenderer\n            .contents[0]\n            .gridRenderer\n            .items;\n\nconst getVideo = gridVideoRenderer => ({\n          \"videoId\" : gridVideoRenderer.videoId,\n          \"thumbnail\" : gridVideoRenderer.thumbnail.thumbnails,\n          \"title\" : gridVideoRenderer.title.simpleText,\n          \"publishedTimeText\" : gridVideoRenderer.publishedTimeText.simpleText,\n          \"viewCountText\" : gridVideoRenderer.viewCountText.simpleText\n      });\n\nconst GetChannelJson = async (channel : string) => {\n  try {\n        const url = urlChannel(channel);\n        const response = await fetch(url);\n        const content = await response.text()\n        const preJson = content.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0]\n        const json = JSON.parse(preJson);        \n        return json.contents.twoColumnBrowseResultsRenderer.tabs;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst GetDataChannel = async channel => {\n  const tabs = await GetChannelText(channel);\n  const items = await _tabsConvertToGridRenderer(tabs);\n  return items.reduce( (acc, { gridVideoRenderer }) => {\n      return acc.concat([getVideo(gridVideoRenderer)])\n   },[])\n\n}\nexport { GetDataChannel, GetVideoJson as GetVideo };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"const _getChannelJson = async channel => {\n  const url = `https://www.youtube.com/c/${channel}/videos`;\n\n  try {\n    const response = await fetch(url);\n    const content = await response.text();\n    const preJson = content.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0];\n    const json = JSON.parse(preJson);\n    return json.contents.twoColumnBrowseResultsRenderer.tabs;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst _tabsConvertToGridRenderer = tabs => tabs && tabs.filter(tab => tab.tabRenderer && tab.tabRenderer.content)[0].tabRenderer.content.sectionListRenderer.contents[0].itemSectionRenderer.contents[0].gridRenderer.items;\n\nconst getVideo = gridVideoRenderer => ({\n  \"videoId\": gridVideoRenderer.videoId,\n  \"thumbnail\": gridVideoRenderer.thumbnail.thumbnails,\n  \"title\": gridVideoRenderer.title.simpleText,\n  \"publishedTimeText\": gridVideoRenderer.publishedTimeText.simpleText,\n  \"viewCountText\": gridVideoRenderer.viewCountText.simpleText\n});\n\nconst GetDataChannel = async channel => {\n  const tabs = await _getChannelJson(channel);\n  const items = await _tabsConvertToGridRenderer(tabs);\n  return items.reduce((acc, {\n    gridVideoRenderer\n  }) => {\n    return acc.concat([getVideo(gridVideoRenderer)]);\n  }, []);\n};\n\nexport { GetDataChannel };","map":{"version":3,"sources":["/home/noct/Trabalho/my-git/reactjs-nodejs-deck/src/services/youtube/connector/youtube.connector.ts"],"names":["_getChannelJson","channel","url","response","fetch","content","text","preJson","split","json","JSON","parse","contents","twoColumnBrowseResultsRenderer","tabs","error","console","log","_tabsConvertToGridRenderer","filter","tab","tabRenderer","sectionListRenderer","itemSectionRenderer","gridRenderer","items","getVideo","gridVideoRenderer","videoId","thumbnail","thumbnails","title","simpleText","publishedTimeText","viewCountText","GetDataChannel","reduce","acc","concat"],"mappings":"AACA,MAAMA,eAAe,GAAG,MAAMC,OAAN,IAAiB;AACxC,QAAMC,GAAG,GAAI,6BAA4BD,OAAQ,SAAjD;;AACC,MAAI;AACE,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,UAAMG,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;AACA,UAAMC,OAAO,GAAGF,OAAO,CAACG,KAAR,CAAc,8BAAd,EAA8C,CAA9C,EAAiDA,KAAjD,CAAuD,GAAvD,EAA4D,CAA5D,CAAhB;AACA,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAb;AACA,WAAOE,IAAI,CAACG,QAAL,CAAcC,8BAAd,CAA6CC,IAApD;AACL,GAND,CAME,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAXD;;AAaA,MAAMG,0BAA0B,GAAGJ,IAAI,IAAIA,IAAI,IAAIA,IAAI,CAACK,MAAL,CAAYC,GAAG,IAAIA,GAAG,CAACC,WAAJ,IAAmBD,GAAG,CAACC,WAAJ,CAAgBhB,OAAtD,EAA+D,CAA/D,EACtCgB,WADsC,CAEtChB,OAFsC,CAGtCiB,mBAHsC,CAItCV,QAJsC,CAI7B,CAJ6B,EAKtCW,mBALsC,CAMtCX,QANsC,CAM7B,CAN6B,EAOtCY,YAPsC,CAQtCC,KARb;;AAUA,MAAMC,QAAQ,GAAGC,iBAAiB,KAAK;AAC7B,aAAYA,iBAAiB,CAACC,OADD;AAE7B,eAAcD,iBAAiB,CAACE,SAAlB,CAA4BC,UAFb;AAG7B,WAAUH,iBAAiB,CAACI,KAAlB,CAAwBC,UAHL;AAI7B,uBAAsBL,iBAAiB,CAACM,iBAAlB,CAAoCD,UAJ7B;AAK7B,mBAAkBL,iBAAiB,CAACO,aAAlB,CAAgCF;AALrB,CAAL,CAAlC;;AASA,MAAMG,cAAc,GAAG,MAAMlC,OAAN,IAAiB;AACtC,QAAMa,IAAI,GAAG,MAAMd,eAAe,CAACC,OAAD,CAAlC;AACA,QAAMwB,KAAK,GAAG,MAAMP,0BAA0B,CAACJ,IAAD,CAA9C;AACA,SAAOW,KAAK,CAACW,MAAN,CAAc,CAACC,GAAD,EAAM;AAAEV,IAAAA;AAAF,GAAN,KAAgC;AACjD,WAAOU,GAAG,CAACC,MAAJ,CAAW,CAACZ,QAAQ,CAACC,iBAAD,CAAT,CAAX,CAAP;AACF,GAFK,EAEJ,EAFI,CAAP;AAID,CAPD;;AASA,SAASQ,cAAT","sourcesContent":["\nconst _getChannelJson = async channel => {\n const url = `https://www.youtube.com/c/${channel}/videos`\n  try {\n        const response = await fetch(url);\n        const content = await response.text()\n        const preJson = content.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0]\n        const json = JSON.parse(preJson);        \n        return json.contents.twoColumnBrowseResultsRenderer.tabs;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst _tabsConvertToGridRenderer = tabs => tabs && tabs.filter(tab => tab.tabRenderer && tab.tabRenderer.content)[0]\n            .tabRenderer\n            .content\n            .sectionListRenderer\n            .contents[0]\n            .itemSectionRenderer\n            .contents[0]\n            .gridRenderer\n            .items;\n\nconst getVideo = gridVideoRenderer => ({\n          \"videoId\" : gridVideoRenderer.videoId,\n          \"thumbnail\" : gridVideoRenderer.thumbnail.thumbnails,\n          \"title\" : gridVideoRenderer.title.simpleText,\n          \"publishedTimeText\" : gridVideoRenderer.publishedTimeText.simpleText,\n          \"viewCountText\" : gridVideoRenderer.viewCountText.simpleText\n      });\n\n\nconst GetDataChannel = async channel => {\n  const tabs = await _getChannelJson(channel);\n  const items = await _tabsConvertToGridRenderer(tabs);\n  return items.reduce( (acc, { gridVideoRenderer }) => {\n      return acc.concat([getVideo(gridVideoRenderer)])\n   },[])\n\n}\n\nexport { GetDataChannel };\n\n\n"]},"metadata":{},"sourceType":"module"}
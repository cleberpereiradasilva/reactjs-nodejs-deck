{"ast":null,"code":"import cheerio from 'cheerio';\nimport { GetChannelJson, GetVideoJson } from \"../connector/vimeo.connector\";\n\nconst _liConverterToJson = body => {\n  const $ = cheerio.load(body);\n  const items = $('li').toArray();\n  const json = [];\n  items.map(async item => {\n    //TODO usar o GetVideo....\n    const videoId = $(item).attr('id').replace(\"clip\", \"\");\n    const videoBody = await GetVideoJson(videoId);\n    const videoJson = getVideo(videoBody);\n    console.log(videoJson);\n    json.push({\n      thumbnail: \"\",\n      title: \"\",\n      publishedTimeText: $(item).find('.meta .time').text().trim(),\n      viewCountText: $(item).find(\".meta .plays\").text()\n    });\n    console.log($(item).find(\".vp-preview .vp-preview-cover\").html());\n    console.log('----');\n  });\n  return json;\n};\n\nconst getVideo = videoBody => {\n  const initScript = videoBody.split('<script type=\"application/ld+json\">')[1];\n  const data = initScript.split('</script>')[0].trim();\n  const json = JSON.parse(data)[0];\n  const videoJson = {\n    \"videoId\": json.url.split('/').pop(),\n    \"thumbnail\": [json.thumbnailUrl],\n    \"title\": json.name,\n    \"description\": json.description,\n    \"publishedTimeText\": json.uploadDate,\n    \"viewCountText\": \"\"\n  };\n  return videoJson;\n};\n\nconst GetDataChannel = async channel => {\n  const tabs = await GetChannelJson(channel);\n  const $ = cheerio.load(tabs);\n  const ol = $('#clips');\n\n  const json = _liConverterToJson(ol.html()); //li.find('li').map(item => console.log('xx'));\n\n\n  return json;\n};\n\nexport { GetDataChannel, GetVideoJson as GetVideo };","map":{"version":3,"sources":["/home/noct/Trabalho/my-git/reactjs-nodejs-deck/src/services/vimeo/facade/vimeo.facade.ts"],"names":["cheerio","GetChannelJson","GetVideoJson","_liConverterToJson","body","$","load","items","toArray","json","map","item","videoId","attr","replace","videoBody","videoJson","getVideo","console","log","push","thumbnail","title","publishedTimeText","find","text","trim","viewCountText","html","initScript","split","data","JSON","parse","url","pop","thumbnailUrl","name","description","uploadDate","GetDataChannel","channel","tabs","ol","GetVideo"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAAQC,cAAR,EAAwBC,YAAxB,QAA2C,8BAA3C;;AAEA,MAAMC,kBAAkB,GAAGC,IAAI,IAAI;AAC/B,QAAMC,CAAC,GAAGL,OAAO,CAACM,IAAR,CAAaF,IAAb,CAAV;AACA,QAAMG,KAAK,GAAGF,CAAC,CAAC,IAAD,CAAD,CAAQG,OAAR,EAAd;AACA,QAAMC,IAAI,GAAG,EAAb;AAEAF,EAAAA,KAAK,CAACG,GAAN,CAAU,MAAMC,IAAN,IAAc;AACpB;AACA,UAAMC,OAAO,GAAGP,CAAC,CAACM,IAAD,CAAD,CAAQE,IAAR,CAAa,IAAb,EAAmBC,OAAnB,CAA2B,MAA3B,EAAkC,EAAlC,CAAhB;AACA,UAAMC,SAAS,GAAG,MAAMb,YAAY,CAACU,OAAD,CAApC;AACA,UAAMI,SAAS,GAAGC,QAAQ,CAACF,SAAD,CAA1B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACAP,IAAAA,IAAI,CAACW,IAAL,CAAU;AACNC,MAAAA,SAAS,EAAG,EADN;AAENC,MAAAA,KAAK,EAAG,EAFF;AAGNC,MAAAA,iBAAiB,EAAGlB,CAAC,CAACM,IAAD,CAAD,CAAQa,IAAR,CAAa,aAAb,EAA4BC,IAA5B,GAAmCC,IAAnC,EAHd;AAINC,MAAAA,aAAa,EAAGtB,CAAC,CAACM,IAAD,CAAD,CAAQa,IAAR,CAAa,cAAb,EAA6BC,IAA7B;AAJV,KAAV;AAMAP,IAAAA,OAAO,CAACC,GAAR,CAAYd,CAAC,CAACM,IAAD,CAAD,CAAQa,IAAR,CAAa,+BAAb,EAA8CI,IAA9C,EAAZ;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,GAdD;AAgBA,SAAOV,IAAP;AACH,CAtBD;;AAwBA,MAAMQ,QAAQ,GAAGF,SAAS,IAAI;AAC1B,QAAMc,UAAU,GAAGd,SAAS,CAACe,KAAV,CAAgB,qCAAhB,EAAuD,CAAvD,CAAnB;AACA,QAAMC,IAAI,GAAGF,UAAU,CAACC,KAAX,CAAiB,WAAjB,EAA8B,CAA9B,EAAiCJ,IAAjC,EAAb;AACA,QAAMjB,IAAI,GAAGuB,IAAI,CAACC,KAAL,CAAWF,IAAX,EAAiB,CAAjB,CAAb;AACA,QAAMf,SAAS,GAAG;AACZ,eAAYP,IAAI,CAACyB,GAAL,CAASJ,KAAT,CAAe,GAAf,EAAoBK,GAApB,EADA;AAEZ,iBAAc,CAAC1B,IAAI,CAAC2B,YAAN,CAFF;AAGZ,aAAU3B,IAAI,CAAC4B,IAHH;AAIZ,mBAAgB5B,IAAI,CAAC6B,WAJT;AAKZ,yBAAsB7B,IAAI,CAAC8B,UALf;AAMZ,qBAAkB;AANN,GAAlB;AAQA,SAAOvB,SAAP;AACH,CAbD;;AAgBA,MAAMwB,cAAc,GAAG,MAAMC,OAAN,IAAiB;AACtC,QAAMC,IAAI,GAAG,MAAMzC,cAAc,CAACwC,OAAD,CAAjC;AACA,QAAMpC,CAAC,GAAGL,OAAO,CAACM,IAAR,CAAaoC,IAAb,CAAV;AACA,QAAMC,EAAE,GAAGtC,CAAC,CAAC,QAAD,CAAZ;;AACA,QAAMI,IAAI,GAAGN,kBAAkB,CAACwC,EAAE,CAACf,IAAH,EAAD,CAA/B,CAJsC,CAKtC;;;AACA,SAAOnB,IAAP;AACD,CAPD;;AAQA,SAAS+B,cAAT,EAAyBtC,YAAY,IAAI0C,QAAzC","sourcesContent":["import cheerio from 'cheerio'\nimport {GetChannelJson, GetVideoJson} from \"../connector/vimeo.connector\";\n\nconst _liConverterToJson = body => { \n    const $ = cheerio.load(body)\n    const items = $('li').toArray();\n    const json = []\n\n    items.map(async item => {\n        //TODO usar o GetVideo....\n        const videoId = $(item).attr('id').replace(\"clip\",\"\");\n        const videoBody = await GetVideoJson(videoId);\n        const videoJson = getVideo(videoBody);\n        console.log(videoJson);\n        json.push({\n            thumbnail : \"\" ,\n            title : \"\",\n            publishedTimeText : $(item).find('.meta .time').text().trim(),\n            viewCountText : $(item).find(\".meta .plays\").text()\n        })\n        console.log($(item).find(\".vp-preview .vp-preview-cover\").html());\n        console.log('----')\n    })\n\n    return json;\n};\n\nconst getVideo = videoBody => {\n    const initScript = videoBody.split('<script type=\"application/ld+json\">')[1];\n    const data = initScript.split('</script>')[0].trim();\n    const json = JSON.parse(data)[0];\n    const videoJson = {\n          \"videoId\" : json.url.split('/').pop(),\n          \"thumbnail\" : [json.thumbnailUrl],\n          \"title\" : json.name,\n          \"description\" : json.description,\n          \"publishedTimeText\" : json.uploadDate,\n          \"viewCountText\" : \"\",\n    }\n    return videoJson;\n};\n\n\nconst GetDataChannel = async channel => {\n  const tabs = await GetChannelJson(channel);\n  const $ = cheerio.load(tabs)\n  const ol = $('#clips');\n  const json = _liConverterToJson(ol.html());\n  //li.find('li').map(item => console.log('xx'));\n  return json;\n}\nexport { GetDataChannel, GetVideoJson as GetVideo };\n"]},"metadata":{},"sourceType":"module"}
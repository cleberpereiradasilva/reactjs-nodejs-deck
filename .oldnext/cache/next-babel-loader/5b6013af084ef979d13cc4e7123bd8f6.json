{"ast":null,"code":"import { GetChannelText, GetVideoText } from \"../connector/youtube.connector\";\n\nconst _tabsConvertToGridRenderer = tabs => tabs && tabs.filter(tab => tab.tabRenderer && tab.tabRenderer.content)[0].tabRenderer.content.sectionListRenderer.contents[0].itemSectionRenderer.contents[0].gridRenderer.items;\n\nconst GetVideo = async videoId => {\n  const videoText = await GetVideoText(videoId);\n  const preJson = videoText.split(\"window[\\\"ytInitialPlayerResponse\\\"] = \")[1].split(\"if (window.ytcsi)\")[0].trim().slice(0, -1);\n  const json = await JSON.parse(preJson);\n  const gridVideoRenderer = json.videoDetails;\n  return {\n    \"videoId\": gridVideoRenderer.videoId,\n    \"txhumbnail\": gridVideoRenderer.thumbnail.thumbnails.map(image => image.url),\n    \"title\": gridVideoRenderer.title,\n    \"description\": \"\",\n    \"pppublishedTimeText\": json.microformat.publishDate,\n    \"viewCountText\": gridVideoRenderer.viewCount\n  };\n};\n\nconst GetDataChannel = async channel => {\n  const channelText = await GetChannelText(channel);\n  const preJson = channelText.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0];\n  const json = JSON.parse(preJson);\n  const tabs = json.contents.twoColumnBrowseResultsRenderer.tabs;\n  const items = await _tabsConvertToGridRenderer(tabs);\n  return Promise.all(items.map(async ({\n    gridVideoRenderer\n  }) => await GetVideo(gridVideoRenderer.videoId)));\n};\n\nexport { GetDataChannel, GetVideo };","map":{"version":3,"sources":["/home/noct/Trabalho/my-git/reactjs-nodejs-deck/src/services/youtube/facade/youtube.facade.ts"],"names":["GetChannelText","GetVideoText","_tabsConvertToGridRenderer","tabs","filter","tab","tabRenderer","content","sectionListRenderer","contents","itemSectionRenderer","gridRenderer","items","GetVideo","videoId","videoText","preJson","split","trim","slice","json","JSON","parse","gridVideoRenderer","videoDetails","thumbnail","thumbnails","map","image","url","title","microformat","publishDate","viewCount","GetDataChannel","channel","channelText","twoColumnBrowseResultsRenderer","Promise","all"],"mappings":"AAAA,SAAQA,cAAR,EAAwBC,YAAxB,QAA4C,gCAA5C;;AAEA,MAAMC,0BAA0B,GAAGC,IAAI,IAAIA,IAAI,IAAIA,IAAI,CAACC,MAAL,CACvCC,GAAG,IAAIA,GAAG,CAACC,WAAJ,IAAmBD,GAAG,CAACC,WAAJ,CAAgBC,OADH,EAErC,CAFqC,EAGtCD,WAHsC,CAItCC,OAJsC,CAKtCC,mBALsC,CAMtCC,QANsC,CAM7B,CAN6B,EAOtCC,mBAPsC,CAQtCD,QARsC,CAQ7B,CAR6B,EAStCE,YATsC,CAUtCC,KAVb;;AAYA,MAAMC,QAAQ,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMC,SAAS,GAAG,MAAMd,YAAY,CAACa,OAAD,CAApC;AACA,QAAME,OAAO,GAAGD,SAAS,CAACE,KAAV,CAAgB,wCAAhB,EAA0D,CAA1D,EACHA,KADG,CACG,mBADH,EACwB,CADxB,EAEHC,IAFG,GAGHC,KAHG,CAGG,CAHH,EAGM,CAAC,CAHP,CAAhB;AAIA,QAAMC,IAAI,GAAG,MAAMC,IAAI,CAACC,KAAL,CAAWN,OAAX,CAAnB;AACA,QAAMO,iBAAiB,GAAGH,IAAI,CAACI,YAA/B;AACA,SAAO;AACC,eAAYD,iBAAiB,CAACT,OAD/B;AAEC,kBAAeS,iBAAiB,CACvBE,SADM,CAENC,UAFM,CAGNC,GAHM,CAGFC,KAAK,IAAIA,KAAK,CAACC,GAHb,CAFhB;AAMC,aAAUN,iBAAiB,CAACO,KAN7B;AAOC,mBAAe,EAPhB;AAQC,2BAAwBV,IAAI,CAACW,WAAL,CAAiBC,WAR1C;AASC,qBAAkBT,iBAAiB,CAACU;AATrC,GAAP;AAWH,CAnBD;;AAsBA,MAAMC,cAAc,GAAG,MAAMC,OAAN,IAAiB;AACtC,QAAMC,WAAW,GAAG,MAAMpC,cAAc,CAACmC,OAAD,CAAxC;AACA,QAAMnB,OAAO,GAAGoB,WAAW,CAACnB,KAAZ,CAAkB,8BAAlB,EAAkD,CAAlD,EAAqDA,KAArD,CAA2D,GAA3D,EAAgE,CAAhE,CAAhB;AACA,QAAMG,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWN,OAAX,CAAb;AACA,QAAMb,IAAI,GAAGiB,IAAI,CAACX,QAAL,CAAc4B,8BAAd,CAA6ClC,IAA1D;AACA,QAAMS,KAAK,GAAG,MAAMV,0BAA0B,CAACC,IAAD,CAA9C;AACA,SAAOmC,OAAO,CAACC,GAAR,CACD3B,KAAK,CAACe,GAAN,CAAU,OAAO;AAAEJ,IAAAA;AAAF,GAAP,KAAiC,MAAMV,QAAQ,CAACU,iBAAiB,CAACT,OAAnB,CAAzD,CADC,CAAP;AAID,CAVD;;AAWA,SAASoB,cAAT,EAAyBrB,QAAzB","sourcesContent":["import {GetChannelText, GetVideoText } from \"../connector/youtube.connector\";\n\nconst _tabsConvertToGridRenderer = tabs => tabs && tabs.filter(\n            tab => tab.tabRenderer && tab.tabRenderer.content\n            )[0]\n            .tabRenderer\n            .content\n            .sectionListRenderer\n            .contents[0]\n            .itemSectionRenderer\n            .contents[0]\n            .gridRenderer\n            .items;\n\nconst GetVideo = async videoId => {\n    const videoText = await GetVideoText(videoId);\n    const preJson = videoText.split(\"window[\\\"ytInitialPlayerResponse\\\"] = \")[1]\n                .split(\"if (window.ytcsi)\")[0]\n                .trim()\n                .slice(0, -1)\n    const json = await JSON.parse(preJson);        \n    const gridVideoRenderer = json.videoDetails\n    return {\n            \"videoId\" : gridVideoRenderer.videoId,\n            \"txhumbnail\" : gridVideoRenderer\n                    .thumbnail\n                    .thumbnails\n                    .map(image => image.url),\n            \"title\" : gridVideoRenderer.title,\n            \"description\" :\"\",\n            \"pppublishedTimeText\" : json.microformat.publishDate,\n            \"viewCountText\" : gridVideoRenderer.viewCount\n      };\n}\n\n\nconst GetDataChannel = async channel => {\n  const channelText = await GetChannelText(channel);\n  const preJson = channelText.split(\"window[\\\"ytInitialData\\\"] = \")[1].split(\";\")[0]\n  const json = JSON.parse(preJson);        \n  const tabs = json.contents.twoColumnBrowseResultsRenderer.tabs;\n  const items = await _tabsConvertToGridRenderer(tabs);\n  return Promise.all(\n        items.map(async ({ gridVideoRenderer }) => await GetVideo(gridVideoRenderer.videoId))     \n  )\n\n}\nexport { GetDataChannel, GetVideo };\n"]},"metadata":{},"sourceType":"module"}